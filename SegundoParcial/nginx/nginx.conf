events {
    worker_connections 1024;
}

http {
    # Configuraci√≥n de upstreams para cada servicio
    upstream login_backend {
        server login_service:3000;
    }
    
    upstream habitaciones_backend {
        server habitaciones_service:8081;
    }
    
    upstream reservas_backend {
        server reservas_service:4000;
    }

    # Configuraci√≥n principal del servidor
    server {
        listen 80;
        server_name localhost;
        
        # Configuraci√≥n de logs
        access_log /var/log/nginx/access.log;
        error_log /var/log/nginx/error.log;

        # CORS Headers para todas las rutas
        add_header 'Access-Control-Allow-Origin' '*' always;
        add_header 'Access-Control-Allow-Methods' 'GET, POST, OPTIONS, PUT, DELETE' always;
        add_header 'Access-Control-Allow-Headers' 'DNT,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Range,Authorization' always;

        # Manejo de preflight OPTIONS requests
        location ~ ^/(auth|habitaciones|reservas)/ {
            if ($request_method = 'OPTIONS') {
                add_header 'Access-Control-Allow-Origin' '*';
                add_header 'Access-Control-Allow-Methods' 'GET, POST, OPTIONS, PUT, DELETE';
                add_header 'Access-Control-Allow-Headers' 'DNT,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Range,Authorization';
                add_header 'Access-Control-Max-Age' 1728000;
                add_header 'Content-Type' 'text/plain; charset=utf-8';
                add_header 'Content-Length' 0;
                return 204;
            }
        }
        
        # ============================================
        # SERVICIO DE AUTENTICACI√ìN (Node.js GraphQL)
        # ============================================
        location /auth/ {
            proxy_pass http://login_backend/;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            
            # Headers espec√≠ficos para GraphQL
            proxy_set_header Content-Type application/json;
            proxy_buffering off;
            proxy_request_buffering off;
            
            # Timeouts
            proxy_connect_timeout 60s;
            proxy_send_timeout 60s;
            proxy_read_timeout 60s;
        }
        
        # ============================================
        # SERVICIO DE HABITACIONES (Rust REST API)
        # ============================================
        location /habitaciones/ {
            proxy_pass http://habitaciones_backend/;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            
            # Headers para API REST
            proxy_set_header Content-Type application/json;
            proxy_buffering off;
            
            # Timeouts
            proxy_connect_timeout 60s;
            proxy_send_timeout 60s;
            proxy_read_timeout 60s;
        }
        
        # ============================================
        # SERVICIO DE RESERVAS (Node.js GraphQL)
        # ============================================
        location /reservas/ {
            proxy_pass http://reservas_backend/;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            
            # Headers espec√≠ficos para GraphQL
            proxy_set_header Content-Type application/json;
            proxy_buffering off;
            proxy_request_buffering off;
            
            # Timeouts
            proxy_connect_timeout 60s;
            proxy_send_timeout 60s;
            proxy_read_timeout 60s;
        }

        # ============================================
        # P√ÅGINA DE INICIO Y DOCUMENTACI√ìN
        # ============================================
        location = / {
            return 200 '<!DOCTYPE html>
<html lang="es">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>üè® Hotel Microservices API Gateway</title>
    <style>
        * { margin: 0; padding: 0; box-sizing: border-box; }
        body { 
            font-family: -apple-system, BlinkMacSystemFont, "Segoe UI", Roboto, sans-serif;
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            min-height: 100vh;
            padding: 20px;
        }
        .container { 
            max-width: 1200px; 
            margin: 0 auto; 
            background: white; 
            border-radius: 20px; 
            box-shadow: 0 20px 40px rgba(0,0,0,0.1);
            overflow: hidden;
        }
        .header {
            background: linear-gradient(135deg, #2c3e50, #34495e);
            color: white;
            padding: 40px;
            text-align: center;
        }
        .header h1 { font-size: 2.5em; margin-bottom: 10px; }
        .header p { font-size: 1.2em; opacity: 0.9; }
        .content { padding: 40px; }
        .services { display: grid; grid-template-columns: repeat(auto-fit, minmax(350px, 1fr)); gap: 30px; margin-bottom: 40px; }
        .service {
            background: #f8f9fa;
            border-radius: 15px;
            padding: 30px;
            border-left: 5px solid;
            transition: transform 0.3s ease, box-shadow 0.3s ease;
        }
        .service:hover { transform: translateY(-5px); box-shadow: 0 15px 30px rgba(0,0,0,0.1); }
        .service.auth { border-left-color: #e74c3c; }
        .service.rooms { border-left-color: #f39c12; }
        .service.reservations { border-left-color: #27ae60; }
        .service h3 { color: #2c3e50; margin-bottom: 15px; font-size: 1.4em; }
        .service .tech { background: #ecf0f1; padding: 5px 12px; border-radius: 20px; font-size: 0.8em; color: #7f8c8d; display: inline-block; margin: 5px 5px 15px 0; }
        .endpoint { 
            background: white; 
            border: 2px solid #ecf0f1; 
            border-radius: 8px; 
            padding: 15px; 
            margin: 10px 0; 
            font-family: Monaco, "Courier New", monospace;
        }
        .method { 
            background: #27ae60; 
            color: white; 
            padding: 4px 8px; 
            border-radius: 4px; 
            font-size: 0.8em; 
            font-weight: bold; 
            margin-right: 10px;
        }
        .method.get { background: #3498db; }
        .url { color: #2980b9; font-weight: bold; }
        .example { background: #2c3e50; color: #ecf0f1; padding: 20px; border-radius: 10px; margin: 20px 0; overflow-x: auto; }
        .ports { background: #e8f4f8; padding: 20px; border-radius: 10px; margin: 20px 0; }
        .ports h4 { color: #2c3e50; margin-bottom: 10px; }
        .port-item { margin: 5px 0; font-family: monospace; }
    </style>
</head>
<body>
    <div class="container">
        <div class="header">
            <h1>üè® Hotel Microservices</h1>
            <p>API Gateway - Todos los servicios unificados en el puerto 80</p>
        </div>
        
        <div class="content">
            <div class="services">
                <div class="service auth">
                    <h3>üîê Servicio de Autenticaci√≥n</h3>
                    <div class="tech">Node.js</div>
                    <div class="tech">GraphQL</div>
                    <div class="tech">PostgreSQL</div>
                    <div class="endpoint">
                        <span class="method">POST</span>
                        <span class="url">http://localhost/auth/graphql</span>
                    </div>
                    <p>Manejo de usuarios, login, registro y autenticaci√≥n JWT.</p>
                </div>
                
                <div class="service rooms">
                    <h3>üè† Servicio de Habitaciones</h3>
                    <div class="tech">Rust</div>
                    <div class="tech">REST API</div>
                    <div class="tech">MongoDB</div>
                    <div class="endpoint">
                        <span class="method get">GET</span>
                        <span class="url">http://localhost/habitaciones/</span>
                    </div>
                    <p>Gesti√≥n de habitaciones, disponibilidad y caracter√≠sticas.</p>
                </div>
                
                <div class="service reservations">
                    <h3>üìÖ Servicio de Reservas</h3>
                    <div class="tech">Node.js</div>
                    <div class="tech">GraphQL</div>
                    <div class="tech">PostgreSQL</div>
                    <div class="endpoint">
                        <span class="method">POST</span>
                        <span class="url">http://localhost/reservas/graphql</span>
                    </div>
                    <p>Sistema completo de reservas y gesti√≥n de bookings.</p>
                </div>
            </div>
            
            <div class="ports">
                <h4>üîå Puertos de Base de Datos (acceso externo):</h4>
                <div class="port-item">‚Ä¢ PostgreSQL Login: <strong>localhost:5433</strong></div>
                <div class="port-item">‚Ä¢ MongoDB Habitaciones: <strong>localhost:27017</strong></div>
                <div class="port-item">‚Ä¢ PostgreSQL Reservas: <strong>localhost:5434</strong></div>
            </div>
            
            <h3>üìù Ejemplo de uso con GraphQL:</h3>
            <div class="example">
curl -X POST http://localhost/reservas/graphql \\
  -H "Content-Type: application/json" \\
  -H "Authorization: Bearer tu_token_jwt" \\
  -d \'{
    "query": "{ reservas { id fecha_entrada fecha_salida estado monto_total } }"
  }\'
            </div>
            
            <h3>üõ†Ô∏è Health Check:</h3>
            <div class="endpoint">
                <span class="method get">GET</span>
                <span class="url">http://localhost/health</span>
            </div>
        </div>
    </div>
</body>
</html>';
            add_header Content-Type text/html;
        }
        
        # Health check endpoint
        location /health {
            return 200 '{
    "status": "OK",
    "timestamp": "$time_iso8601",
    "services": {
        "auth": "http://login_service:3000",
        "habitaciones": "http://habitaciones_service:8081", 
        "reservas": "http://reservas_service:4000"
    },
    "databases": {
        "login_db": "PostgreSQL (port 5433)",
        "habitaciones_db": "MongoDB (port 27017)",
        "reservas_db": "PostgreSQL (port 5434)"
    }
}';
            add_header Content-Type application/json;
        }
    }
}